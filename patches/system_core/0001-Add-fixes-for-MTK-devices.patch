From c03b32c0e4f98179fa73e00ed25e1680462d1b7b Mon Sep 17 00:00:00 2001
From: Zhaofeng Li <hello@zhaofeng.li>
Date: Tue, 16 May 2017 00:34:51 -0700
Subject: [PATCH 1/2] Add fixes for MTK devices

Change-Id: I8c2d0061d1a0e12bd8907b9e4a46afde87e2f02e
---
 liblog/logger_write.c | 41 ++++++++++++++++++++++++++++++++++++++---
 1 file changed, 38 insertions(+), 3 deletions(-)

diff --git a/liblog/logger_write.c b/liblog/logger_write.c
index c7b5a84..a507852 100644
--- a/liblog/logger_write.c
+++ b/liblog/logger_write.c
@@ -31,10 +31,13 @@
 #include <private/android_filesystem_config.h>
 #include <private/android_logger.h>
 
+#ifndef FAKE_LOG_DEVICE
+#include <sys/system_properties.h>
+#endif
+
 #include "config_write.h"
 #include "log_portability.h"
 #include "logger.h"
-
 #define LOG_BUF_SIZE 1024
 
 static int __write_to_log_init(log_id_t, struct iovec *vec, size_t nr);
@@ -389,7 +392,7 @@ LIBLOG_ABI_PUBLIC int __android_log_buf_write(int bufID, int prio,
                                               const char *tag, const char *msg)
 {
     struct iovec vec[3];
-    char tmp_tag[32];
+    char tmp_tag[32]="0";
 
     if (!tag)
         tag = "";
@@ -410,7 +413,14 @@ LIBLOG_ABI_PUBLIC int __android_log_buf_write(int bufID, int prio,
             snprintf(tmp_tag, sizeof(tmp_tag), "use-Rlog/RLOG-%s", tag);
             tag = tmp_tag;
     }
-
+#ifndef FAKE_LOG_DEVICE
+    /* check property for moving all RIL logs to main */
+    if (bufID == LOG_ID_RADIO) {
+	if ((__system_property_get("persist.ril.log",tmp_tag) > 0) &&
+		!strcmp(tmp_tag,"1"))
+	    bufID = LOG_ID_MAIN;
+    }
+#endif
 #if __BIONIC__
     if (prio == ANDROID_LOG_FATAL) {
         android_set_abort_message(msg);
@@ -581,3 +591,28 @@ LIBLOG_ABI_PUBLIC int __android_log_security_bswrite(int32_t tag,
 
     return write_to_log(LOG_ID_SECURITY, vec, 4);
 }
+
+#ifdef MTK_HARDWARE
+#ifndef __unused
+#define __unused  __attribute__((__unused__))
+#endif
+struct xlog_record {
+    const char *tag_str;
+    const char *fmt_str;
+    int prio;
+};
+
+LIBLOG_ABI_PUBLIC void __attribute__((weak)) __xlog_buf_printf(int bufid __unused, const struct xlog_record *xlog_record __unused, ...) {
+#ifndef FAKE_LOG_DEVICE
+    char prop[32]="0";
+    /* check property for diable all xlog */
+    __system_property_get("ro.disable.xlog",prop);
+    if (!strcmp(prop, "0"))
+#endif
+    {
+	va_list args;
+	va_start(args, xlog_record);
+	__android_log_vprint(xlog_record->prio, xlog_record->tag_str, xlog_record->fmt_str, args);
+    }
+}
+#endif
-- 
2.14.1

